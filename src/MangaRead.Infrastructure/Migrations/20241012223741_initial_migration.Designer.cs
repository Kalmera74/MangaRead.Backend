// <auto-generated />
using System;
using MangaRead.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaLuckNeo.Infrastructure.Migrations
{
    [DbContext(typeof(MangaDbContext))]
    [Migration("20241012223741_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AuthorEntityMangaEntity", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MangaEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("AuthorsId", "MangaEntityId");

                    b.HasIndex("MangaEntityId");

                    b.ToTable("MangaAuthors", (string)null);
                });

            modelBuilder.Entity("AuthorEntityWebNovelEntity", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WebNovelEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("AuthorsId", "WebNovelEntityId");

                    b.HasIndex("WebNovelEntityId");

                    b.ToTable("WebNovelAuthors", (string)null);
                });

            modelBuilder.Entity("GenreEntityMangaEntity", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MangaEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("GenresId", "MangaEntityId");

                    b.HasIndex("MangaEntityId");

                    b.ToTable("MangaGenres", (string)null);
                });

            modelBuilder.Entity("GenreEntityWebNovelEntity", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WebNovelEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("GenresId", "WebNovelEntityId");

                    b.HasIndex("WebNovelEntityId");

                    b.ToTable("WebNovelGenres", (string)null);
                });

            modelBuilder.Entity("MangaEntityRatingEntity", b =>
                {
                    b.Property<Guid>("MangaEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RatingsId")
                        .HasColumnType("char(36)");

                    b.HasKey("MangaEntityId", "RatingsId");

                    b.HasIndex("RatingsId");

                    b.ToTable("MangaRatings", (string)null);
                });

            modelBuilder.Entity("MangaEntityUserEntity", b =>
                {
                    b.Property<Guid>("BookMarkedMangasId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookMarkedMangasId", "UserEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserBookmarkedMangas", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Author.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Genre.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Rating.RatingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("StarCount")
                        .HasMaxLength(3)
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("UserId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.Content.MangaChapterContentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("ChapterId");

                    b.HasIndex("ItemId");

                    b.ToTable("MangaChapterContent", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MangaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextChapterId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PreviousChapterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("MangaId");

                    b.HasIndex("NextChapterId");

                    b.HasIndex("PreviousChapterId");

                    b.ToTable("MangaChapter", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SeasonCount")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("WebNovelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("CoverImageId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WebNovelId")
                        .IsUnique();

                    b.ToTable("Manga", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Type.MangaTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("MangaType", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.Content.WebNovelChapterContentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.ToTable("WebNovelChapterContent", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.WebNovelChapterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("NextChapterId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PreviousChapterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WebNovelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.HasIndex("NextChapterId");

                    b.HasIndex("PreviousChapterId");

                    b.HasIndex("WebNovelId");

                    b.ToTable("WebNovelChapter", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Type.WebNovelTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("WebNovelType", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CoverImageId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MangaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SeasonCount")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("CoverImageId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("WebNovel", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Status.StatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.System.Image.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.System.User.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.System.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 36 });

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RatingEntityWebNovelEntity", b =>
                {
                    b.Property<Guid>("RatingsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WebNovelEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("RatingsId", "WebNovelEntityId");

                    b.HasIndex("WebNovelEntityId");

                    b.ToTable("WebNovelRatings", (string)null);
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UserEntityWebNovelEntity", b =>
                {
                    b.Property<Guid>("BookMarkedWebNovelsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookMarkedWebNovelsId", "UserEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserBookmarkedWebNovels", (string)null);
                });

            modelBuilder.Entity("AuthorEntityMangaEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Author.AuthorEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", null)
                        .WithMany()
                        .HasForeignKey("MangaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorEntityWebNovelEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Author.AuthorEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", null)
                        .WithMany()
                        .HasForeignKey("WebNovelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreEntityMangaEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Genre.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", null)
                        .WithMany()
                        .HasForeignKey("MangaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreEntityWebNovelEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Genre.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", null)
                        .WithMany()
                        .HasForeignKey("WebNovelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaEntityRatingEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", null)
                        .WithMany()
                        .HasForeignKey("MangaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Rating.RatingEntity", null)
                        .WithMany()
                        .HasForeignKey("RatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaEntityUserEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", null)
                        .WithMany()
                        .HasForeignKey("BookMarkedMangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.System.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Rating.RatingEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.System.User.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.Content.MangaChapterContentEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", "Chapter")
                        .WithMany("Content")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.System.Image.ImageEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", "Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", "NextChapter")
                        .WithMany()
                        .HasForeignKey("NextChapterId");

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", "PreviousChapter")
                        .WithMany()
                        .HasForeignKey("PreviousChapterId");

                    b.Navigation("Manga");

                    b.Navigation("NextChapter");

                    b.Navigation("PreviousChapter");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.System.Image.ImageEntity", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Status.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.Manga.Type.MangaTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", "WebNovel")
                        .WithOne("Manga")
                        .HasForeignKey("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", "WebNovelId");

                    b.Navigation("CoverImage");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("WebNovel");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.WebNovelChapterEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.Content.WebNovelChapterContentEntity", "Content")
                        .WithOne("Chapter")
                        .HasForeignKey("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.WebNovelChapterEntity", "ContentId");

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.WebNovelChapterEntity", "NextChapter")
                        .WithMany()
                        .HasForeignKey("NextChapterId");

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.WebNovelChapterEntity", "PreviousChapter")
                        .WithMany()
                        .HasForeignKey("PreviousChapterId");

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", "WebNovel")
                        .WithMany("Chapters")
                        .HasForeignKey("WebNovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("NextChapter");

                    b.Navigation("PreviousChapter");

                    b.Navigation("WebNovel");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.System.Image.ImageEntity", "CoverImage")
                        .WithMany()
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Status.StatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Type.WebNovelTypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverImage");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RatingEntityWebNovelEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Rating.RatingEntity", null)
                        .WithMany()
                        .HasForeignKey("RatingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", null)
                        .WithMany()
                        .HasForeignKey("WebNovelEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.System.User.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.System.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserEntityWebNovelEntity", b =>
                {
                    b.HasOne("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", null)
                        .WithMany()
                        .HasForeignKey("BookMarkedWebNovelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaLuckNeo.Domain.Entities.System.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.Chapter.MangaChapterEntity", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.Manga.MangaEntity", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.Chapter.Content.WebNovelChapterContentEntity", b =>
                {
                    b.Navigation("Chapter")
                        .IsRequired();
                });

            modelBuilder.Entity("MangaLuckNeo.Domain.Entities.Readables.WebNovel.WebNovelEntity", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Manga");
                });
#pragma warning restore 612, 618
        }
    }
}
